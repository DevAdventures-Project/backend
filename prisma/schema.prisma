// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  pseudo        String
  password      String
  coins         Int             @default(0)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  questsCreated Quest[]
  questsHelped  Quest[]         @relation("QuestHelpers")
  messages      Message[]
  ranks         UserQuestRank[]
  inventory     UserItem[]
}

model Item {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  purchasedBy UserItem[]
}

model UserItem {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  item      Item     @relation(fields: [itemId], references: [id])
  itemId    Int
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quest {
  id          Int       @id @default(autoincrement())
  title       String
  content     String
  link        String
  nbHelpers   Int
  category    String
  minimumRank String
  status      String
  deadline    DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      User      @relation(fields: [authorId], references: [id])
  authorId    Int
  helpers     User[]    @relation("QuestHelpers")
  Message     Message[]
}

model UserQuestRank {
  id        Int      @id @default(autoincrement())
  rank      String
  rankValue Int
  category  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  authorId  Int
  questId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  quest     Quest    @relation(fields: [questId], references: [id])
}
